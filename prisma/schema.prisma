generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  product_id       String             @id @default(uuid()) @db.Uuid
  name             String
  slug             String             @unique
  description      String
  summary          String             @db.VarChar(103)
  price            Decimal            @db.Decimal
  image_url        String
  discount_id      String?            @db.Uuid
  quantity         Int                @default(0)
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @updatedAt @db.Timestamp(6)
  released_date    DateTime           @db.Timestamp(6)
  discount         discount?          @relation(fields: [discount_id], references: [discount_id], onDelete: Cascade, onUpdate: NoAction)
  product_category product_category[]
  product_rate     product_rate[]
  cart_items       CartItem[]

  @@map("product")
}

model category {
  category_id      String             @id @db.Uuid
  name             String
  slug             String             @unique
  created_at       DateTime           @default(now()) @db.Timestamp(6)
  updated_at       DateTime           @default(now()) @db.Timestamp(6)
  product_category product_category[]
}

model discount {
  discount_id      String    @id @db.Uuid
  discount_percent Int       @default(0)
  active           Boolean   @default(false)
  created_at       DateTime  @default(now()) @db.Timestamp(6)
  updated_at       DateTime  @default(now()) @db.Timestamp(6)
  product          Product[]
}

model product_category {
  product_category_id Int      @id @default(autoincrement())
  product_id          String   @db.Uuid
  category_id         String   @db.Uuid
  category            category @relation(fields: [category_id], references: [category_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_category")
  product             Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_product")
}

model product_rate {
  product_rate_id String   @id @db.Uuid
  user_id         String   @db.Uuid
  product_id      String   @db.Uuid
  score           Int
  description     String
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  product         Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_product")

  @@unique([product_id, user_id], map: "product_user")
}

model Cart {
  cart_id    String     @id @default(uuid()) @db.Uuid
  user_id    String?    @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  items      CartItem[]

  @@unique([cart_id, user_id])
  @@map("cart")
}

model CartItem {
  item_id    String  @id @default(uuid()) @db.Uuid
  product_id String  @db.Uuid
  cart_id    String  @db.Uuid
  quantity   Int
  selected   Boolean @default(false)
  product    Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  cart       Cart    @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade)

  @@map("cart_item")
}

model Account {
  id                String  @id @default(cuid()) @map("account_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid()) @map("session_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String    @id @default(cuid()) @map("user_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}
