// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  product_id         String     @id @default(uuid()) @db.Uuid
  slug               String     @unique
  name               String
  description        String
  summary            String
  image_url          String
  categories         String[]
  price              Int
  quantity_available Int
  is_deal            Boolean    @default(false)
  discount_percent   Float      @default(0)
  created_at         DateTime   @default(now())
  updated_at         DateTime   @updatedAt
  released_date      DateTime?
  CartItem           CartItem[]

  @@map("product")
}

model Cart {
  cart_id    String     @id @default(uuid()) @db.Uuid
  user_id    String?    @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  items      CartItem[]

  @@unique([cart_id, user_id])
  @@map("cart")
}

model CartItem {
  item_id    String  @id @default(uuid()) @db.Uuid
  product_id String  @db.Uuid
  cart_id    String  @db.Uuid
  quantity   Int
  selected   Boolean @default(false)
  product    Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  cart       Cart    @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade)
  order_id   String? @db.Uuid

  @@map("cart_item")
}

model Account {
  id                String  @id @default(cuid()) @map("account_id")
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid()) @map("session_id")
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id            String    @id @default(cuid()) @map("user_id")
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}
